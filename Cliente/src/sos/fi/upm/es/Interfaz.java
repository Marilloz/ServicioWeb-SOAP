package sos.fi.upm.es;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.Arrays;

import javax.swing.JLabel;
import javax.swing.JOptionPane;

import org.apache.axis2.AxisFault;

import sos.fi.upm.es.UPMGeoCachingStub.AddFollower;
import sos.fi.upm.es.UPMGeoCachingStub.AddFollowerResponse;
import sos.fi.upm.es.UPMGeoCachingStub.AddUser;
import sos.fi.upm.es.UPMGeoCachingStub.AddUserResponse;
import sos.fi.upm.es.UPMGeoCachingStub.AddUserResponseE;
import sos.fi.upm.es.UPMGeoCachingStub.ChangePassword;
import sos.fi.upm.es.UPMGeoCachingStub.ChangePasswordResponse;
import sos.fi.upm.es.UPMGeoCachingStub.CreateTreasure;
import sos.fi.upm.es.UPMGeoCachingStub.CreateTreasureResponse;
import sos.fi.upm.es.UPMGeoCachingStub.FindTreasure;
import sos.fi.upm.es.UPMGeoCachingStub.FindTreasureResponse;
import sos.fi.upm.es.UPMGeoCachingStub.FollowerList;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyFollowerTreasuresCreated;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyFollowerTreasuresCreatedResponse;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyFollowers;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyFollowersResponse;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyTreasuresCreated;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyTreasuresCreatedResponse;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyTreasuresFound;
import sos.fi.upm.es.UPMGeoCachingStub.GetMyTreasuresFoundResponse;
import sos.fi.upm.es.UPMGeoCachingStub.Login;
import sos.fi.upm.es.UPMGeoCachingStub.LoginResponse;
import sos.fi.upm.es.UPMGeoCachingStub.Logout;
import sos.fi.upm.es.UPMGeoCachingStub.PasswordPair;
import sos.fi.upm.es.UPMGeoCachingStub.RemoveFollower;
import sos.fi.upm.es.UPMGeoCachingStub.RemoveFollowerResponse;
import sos.fi.upm.es.UPMGeoCachingStub.RemoveUser;
import sos.fi.upm.es.UPMGeoCachingStub.RemoveUserResponse;
import sos.fi.upm.es.UPMGeoCachingStub.Response;
import sos.fi.upm.es.UPMGeoCachingStub.Treasure;
import sos.fi.upm.es.UPMGeoCachingStub.TreasureList;
import sos.fi.upm.es.UPMGeoCachingStub.User;
import sos.fi.upm.es.UPMGeoCachingStub.Username;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Marilloz
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    
    private String op = "";
    private String User = "";
    private int numero = 1;
    private int numero2 = 1;
    private 	 UPMGeoCachingStub stub;

    
	Font BernardMTCondensesd;
	Font MongolianBaiti;
	
    public Interfaz() {
    	try{
    		BernardMTCondensesd = Font.createFont(Font.TRUETYPE_FONT, new File("bernard-mt-condensed.ttf")).deriveFont(Font.PLAIN,60f);
    		MongolianBaiti = Font.createFont(Font.TRUETYPE_FONT, new File("monbaiti.ttf")).deriveFont(Font.PLAIN,24f);

    	}catch(Exception e){
    		e.printStackTrace();
    	}
    	
		try {
			stub = new UPMGeoCachingStub();
			stub._getServiceClient().getOptions().setManageSession(true);
			stub._getServiceClient().engageModule("addressing");
		} catch (AxisFault e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        initComponents();
        ((JLabel)UsuariosBox.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)operacionesBox.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
     String LuffyPwd = "Luffy6533";
	 String ZoroPwd = "Zoro2969";
	 String ShanksPwd = "Shanks4432";
	 String AdminPwd = "admin";

	
	public  void addUserLuffy() throws RemoteException{
		//ADD Luffy
		AddUser user = new AddUser();
		Username u = new Username();
		u.setUsername("Luffy");
		user.setArgs0(u);
		AddUserResponseE res = stub.addUser(user);
		AddUserResponse respuesta = res.get_return();
		if(respuesta.getResponse()){
			LuffyPwd = respuesta.getPwd();
			TextoResultados.setText("Contraseña de Luffy: " +respuesta.getPwd());
		}
		else{
			TextoResultados.setText("AddUser Error Usuario ya existente o no eres el admin");
		}	
	}

	public  void addUserZoro() throws RemoteException{		
		//ADD Zoro
		AddUser user = new AddUser();
		Username u = new Username();
		u.setUsername("Zoro");
		user.setArgs0(u);
		AddUserResponseE res = stub.addUser(user);
		AddUserResponse respuesta = res.get_return();
		if(respuesta.getResponse()){
			ZoroPwd = respuesta.getPwd();
			TextoResultados.setText("Contraseña de Zoro: " +respuesta.getPwd());
			
		}
		else{
			TextoResultados.setText("AddUser Error Usuario ya existente o no eres el admin");
		}		
	}

	public  void addUserShanks() throws RemoteException{		
		//ADD Shanks
		AddUser user = new AddUser();
		Username u = new Username();
		u.setUsername("Shanks");
		user.setArgs0(u);
		AddUserResponseE res = stub.addUser(user);
		AddUserResponse respuesta = res.get_return();
		if(respuesta.getResponse()){
			ShanksPwd = respuesta.getPwd();
			TextoResultados.setText("Contraseña de Shanks: " +respuesta.getPwd());
		}
		else{
			TextoResultados.setText("AddUser Error Usuario ya existente o no eres el admin");
		}	
	}

	public  void loginAdmin()throws RemoteException{
		Login login23 = new Login();
		User param = new User();
		param.setName("admin");
		param.setPwd(AdminPwd);
		login23.setArgs0(param );
		LoginResponse resL = stub.login(login23);
		Response res2 = resL.get_return();
		TextoResultados.setText("Resultado de Login de Admin: "+res2.getResponse());
	}

	public  void loginLuffy()throws RemoteException{
		Login login23 = new Login();
		User param = new User();
		param.setName("Luffy");
		param.setPwd(LuffyPwd);
		login23.setArgs0(param );
		LoginResponse resL = stub.login(login23);
		Response res2 = resL.get_return();
		TextoResultados.setText("Resultado de Login de Luffy: "+res2.getResponse());
	}

	public  void loginZoro()throws RemoteException{
		Login login23 = new Login();
		User param = new User();
		param.setName("Zoro");
		param.setPwd(ZoroPwd);
		login23.setArgs0(param );
		LoginResponse resL = stub.login(login23);
		Response res2 = resL.get_return();
		TextoResultados.setText("Resultado de Login de Zoro: "+res2.getResponse());
	}

	public  void loginShanks()throws RemoteException{
		Login login23 = new Login();
		User param = new User();
		param.setName("Shanks");
		param.setPwd(ShanksPwd);
		login23.setArgs0(param );
		LoginResponse resL = stub.login(login23);
		Response res2 = resL.get_return();
		TextoResultados.setText("Resultado de Login de Shanks: "+res2.getResponse());
	}

	public  void logout()throws RemoteException{
		Logout logout0 = new Logout();
		stub.logout(logout0 );
		TextoResultados.setText("Logout Realizado");
	}

	public  void removeUserLuffy() throws RemoteException{
		RemoveUser removeUser9 = new RemoveUser();
		Username u = new Username();
		u.setUsername("Luffy");
		removeUser9.setArgs0(u);
		RemoveUserResponse resRv = stub.removeUser(removeUser9);
		Response resFin = resRv.get_return();
		TextoResultados.setText("Resultado de remove Luffy: "+resFin.getResponse());
	}

	public  void removeUserZoro() throws RemoteException{
		RemoveUser removeUser9 = new RemoveUser();
		Username u = new Username();
		u.setUsername("Zoro");
		removeUser9.setArgs0(u);
		RemoveUserResponse resRv = stub.removeUser(removeUser9);
		Response resFin = resRv.get_return();
		TextoResultados.setText("Resultado de remove Zoro: "+resFin.getResponse());
	}

	public  void removeUserShanks() throws RemoteException{
		RemoveUser removeUser9 = new RemoveUser();
		Username u = new Username();
		u.setUsername("Shanks");
		removeUser9.setArgs0(u);
		RemoveUserResponse resRv = stub.removeUser(removeUser9);
		Response resFin = resRv.get_return();
		TextoResultados.setText("Resultado de remove Shanks: "+resFin.getResponse());
	}

	public  void changePasswordLuffy() throws RemoteException{
		ChangePassword changePassword21 = new ChangePassword();
		PasswordPair param2 = new PasswordPair();
		param2.setNewpwd("NuevaCont");
		param2.setOldpwd(LuffyPwd);
		changePassword21.setArgs0(param2 );
		ChangePasswordResponse resCP = stub.changePassword(changePassword21 );
		Response resCP2 = resCP.get_return();
		TextoResultados.setText("Resultado de ChangePassword Luffy: "+ resCP2.getResponse());
		if(resCP2.getResponse()){
			LuffyPwd = "NuevaCont";
		}
	}

	public  void changePasswordZoro() throws RemoteException{
		ChangePassword changePassword21 = new ChangePassword();
		PasswordPair param2 = new PasswordPair();
		param2.setNewpwd("NuevaCont");
		param2.setOldpwd(ZoroPwd);
		changePassword21.setArgs0(param2 );
		ChangePasswordResponse resCP = stub.changePassword(changePassword21 );
		Response resCP2 = resCP.get_return();
		TextoResultados.setText("Resultado de ChangePassword Zoro: "+ resCP2.getResponse());
		if(resCP2.getResponse()){
			ZoroPwd = "NuevaCont";
		}
	}

	public  void changePasswordShanks() throws RemoteException{
		ChangePassword changePassword21 = new ChangePassword();
		PasswordPair param2 = new PasswordPair();
		param2.setNewpwd("NuevaCont");
		param2.setOldpwd(ShanksPwd);
		changePassword21.setArgs0(param2 );
		ChangePasswordResponse resCP = stub.changePassword(changePassword21 );
		Response resCP2 = resCP.get_return();
		TextoResultados.setText("Resultado de ChangePassword Shanks: "+ resCP2.getResponse());
		if(resCP2.getResponse()){
			ShanksPwd = "NuevaCont";
		}
	}

	public  void addFollowerLuffy() throws RemoteException{
		AddFollower addFollower11 = new AddFollower();
		Username parametro1 = new Username();
		parametro1.setUsername("Luffy");
		addFollower11.setArgs0(parametro1);
		AddFollowerResponse resAF = stub.addFollower(addFollower11);
		Response res = resAF.get_return();
		TextoResultados.setText("Resultado de addFollower Luffy: "+res.getResponse());
	}

	public  void addFollowerZoro() throws RemoteException{
		AddFollower addFollower11 = new AddFollower();
		Username parametro1 = new Username();
		parametro1.setUsername("Zoro");
		addFollower11.setArgs0(parametro1);
		AddFollowerResponse resAF = stub.addFollower(addFollower11);
		Response res = resAF.get_return();
		TextoResultados.setText("Resultado de addFollower Zoro: "+res.getResponse());
	}

	public  void addFollowerShanks() throws RemoteException{
		AddFollower addFollower11 = new AddFollower();
		Username parametro1 = new Username();
		parametro1.setUsername("Shanks");
		addFollower11.setArgs0(parametro1);
		AddFollowerResponse resAF = stub.addFollower(addFollower11);
		Response res = resAF.get_return();
		TextoResultados.setText("Resultado de addFollower Shanks: "+res.getResponse());
	}

	public  void removeFollowerLuffy() throws RemoteException{
		RemoveFollower removeFollower1;
		Username parametro1 = new Username();
		parametro1.setUsername("Luffy");
		removeFollower1 = new RemoveFollower();
		removeFollower1.setArgs0(parametro1);
		RemoveFollowerResponse resRF = stub.removeFollower(removeFollower1);
		Response res = resRF.get_return();
		TextoResultados.setText("Resultado de removeFollower Luffy: "+res.getResponse());
	}

	public  void removeFollowerZoro() throws RemoteException{
		RemoveFollower removeFollower1;
		Username parametro1 = new Username();
		parametro1.setUsername("Zoro");
		removeFollower1 = new RemoveFollower();
		removeFollower1.setArgs0(parametro1);
		RemoveFollowerResponse resRF = stub.removeFollower(removeFollower1);
		Response res = resRF.get_return();
		TextoResultados.setText("Resultado de removeFollower Zoro: "+res.getResponse());
	}

	public  void removeFollowerShanks() throws RemoteException{
		RemoveFollower removeFollower1;
		Username parametro1 = new Username();
		parametro1.setUsername("Shanks");
		removeFollower1 = new RemoveFollower();
		removeFollower1.setArgs0(parametro1);
		RemoveFollowerResponse resRF = stub.removeFollower(removeFollower1);
		Response res = resRF.get_return();
		TextoResultados.setText("Resultado de removeFollower Shanks: "+res.getResponse());
	}
	
	public  void getMyFollowers() throws RemoteException{
		GetMyFollowers getMyFollowers5 = new GetMyFollowers();
		GetMyFollowersResponse resGF = stub.getMyFollowers(getMyFollowers5);
		FollowerList res = resGF.get_return();
		boolean resBool = res.getResult();
		if(resBool){
			if(res.getFollowers() == null)
				res.setFollowers(new String[0]);
			String textaco = "";
			textaco +="Resultado de getMyFollowers: true \n";
			textaco += "Cantidad de Seguidores = " + res.getFollowers().length + "\n";
			textaco += "Sugiendo a: "+ Arrays.toString(res.getFollowers());
			TextoResultados.setText(textaco);
		}
		else{
			TextoResultados.setText("Resultado de getMyFollowers: false");
		}
	}
	
	public  void createTreasureOnePiece() throws RemoteException{
		CreateTreasure createTreasure13 = new CreateTreasure();
		Treasure param = new Treasure();
		param.setName("One Piece");
		param.setAltitude(77);
		param.setLatitude(77);
		createTreasure13.setArgs0(param );
		CreateTreasureResponse resCT = stub.createTreasure(createTreasure13 );
		Response res = resCT.get_return();
		TextoResultados.setText("Resultado de createTreasure OnePiece: "+res.getResponse());
	}
	
	public  void createTreasureHitoHitoNikaModel() throws RemoteException{
		CreateTreasure createTreasure13 = new CreateTreasure();
		Treasure param = new Treasure();
		param.setName("Hito Hito no mi: Nika Model");
		param.setAltitude(100);
		param.setLatitude(50);
		createTreasure13.setArgs0(param );
		CreateTreasureResponse resCT = stub.createTreasure(createTreasure13 );
		Response res = resCT.get_return();
		TextoResultados.setText("Resultado de createTreasure HitoHitoNikaModel: "+res.getResponse());
	}
	
	public  void createTreasureTumbaDeShirohige() throws RemoteException{
		CreateTreasure createTreasure13 = new CreateTreasure();
		Treasure param = new Treasure();
		param.setName("Tumba De Shirohige");
		param.setAltitude(24);
		param.setLatitude(42);
		createTreasure13.setArgs0(param );
		CreateTreasureResponse resCT = stub.createTreasure(createTreasure13 );
		Response res = resCT.get_return();
		TextoResultados.setText("Resultado de createTreasure TumbaDeShirohige: "+res.getResponse());
	}
	
	public  void findTreasureOnePiece() throws RemoteException{
		FindTreasure finTreasure = new FindTreasure();
		Treasure param = new Treasure();
		param.setName("One Piece");
		param.setAltitude(77);
		param.setLatitude(77);
		finTreasure.setArgs0(param);
		FindTreasureResponse resCT = stub.findTreasure(finTreasure);
		Response res = resCT.get_return();
		TextoResultados.setText("Resultado de findTreasure OnePiece: "+res.getResponse());
	}
	
	public  void findTreasureHitoHitoNikaModel() throws RemoteException{
		FindTreasure finTreasure = new FindTreasure();
		Treasure param = new Treasure();
		param.setName("Hito Hito no mi: Nika Model");
		param.setAltitude(100);
		param.setLatitude(50);
		finTreasure.setArgs0(param);
		FindTreasureResponse resCT = stub.findTreasure(finTreasure);
		Response res = resCT.get_return();
		TextoResultados.setText("Resultado de findTreasure HitoHitoNikaModel: "+res.getResponse());
	}
	
	public  void findTreasureTumbaDeShirohige() throws RemoteException{
		FindTreasure finTreasure = new FindTreasure();
		Treasure param = new Treasure();
		param.setName("Tumba De Shirohige");
		param.setAltitude(24);
		param.setLatitude(42);
		finTreasure.setArgs0(param);
		FindTreasureResponse resCT = stub.findTreasure(finTreasure);
		Response res = resCT.get_return();
		TextoResultados.setText("Resultado de findTreasure TumbaDeShirohige: "+res.getResponse());
	}
	
	public  void getMyTreasuresFound() throws RemoteException{
		
		GetMyTreasuresFound getMyTreasuresFound3 = new GetMyTreasuresFound();
		GetMyTreasuresFoundResponse resGTF = stub.getMyTreasuresFound(getMyTreasuresFound3 );
		TreasureList res = resGTF.get_return();
		if(res.getResult()){
			
			String textaco = "";
			textaco+="Resultado de getMyTreasuresCreated: true \n";
			textaco+="Nombres de los Tesoros = " + Arrays.toString(res.getNames()) + "\n";
			textaco+="Latitudes de los Tesoros = "+ Arrays.toString(res.getLats()) + "\n";
			textaco+="Altitudes de los Tesoros = "+ Arrays.toString(res.getAlts()) + "\n";
			TextoResultados.setText(textaco);
		}
		else{
			TextoResultados.setText("Resultado de getMyTreasuresFound: false");

		}
	}

	
	public  void getMyTreasuresCreated() throws RemoteException{
		
		GetMyTreasuresCreated getMyTreasuresCreated7 = new GetMyTreasuresCreated();
		
		GetMyTreasuresCreatedResponse resGTC = stub.getMyTreasuresCreated(getMyTreasuresCreated7);
		TreasureList res = resGTC.get_return();
		if(res.getResult()){
			
			String textaco = "";
			textaco+="Resultado de getMyTreasuresCreated: true \n";
			textaco+="Nombres de los Tesoros = " + Arrays.toString(res.getNames()) + "\n";
			textaco+="Latitudes de los Tesoros = "+ Arrays.toString(res.getLats()) + "\n";
			textaco+="Altitudes de los Tesoros = "+ Arrays.toString(res.getAlts()) + "\n";
			TextoResultados.setText(textaco);
		}
		else{
			TextoResultados.setText("\nResultado de getMyTreasuresCreated: false");

		}
	}
	
	public  void getMyFollowerTreasuresCreatedLuffy() throws RemoteException{
		GetMyFollowerTreasuresCreated getMyFollowerTreasuresCreated19 = new GetMyFollowerTreasuresCreated();
		Username param = new Username();
		param.setUsername("Luffy");
		getMyFollowerTreasuresCreated19.setArgs0(param );
		GetMyFollowerTreasuresCreatedResponse resGFTC 
			= stub.getMyFollowerTreasuresCreated(getMyFollowerTreasuresCreated19 );
		TreasureList res = resGFTC.get_return();
		if(res.getResult()){
			String textaco = "";
			textaco+="Resultado de getMyTreasuresCreated: true \n";
			textaco+="Nombres de los Tesoros = " + Arrays.toString(res.getNames()) + "\n";
			textaco+="Latitudes de los Tesoros = "+ Arrays.toString(res.getLats()) + "\n";
			textaco+="Altitudes de los Tesoros = "+ Arrays.toString(res.getAlts()) + "\n";
			TextoResultados.setText(textaco);
		}
		else{
			TextoResultados.setText("\nResultado de getMyFollowerTreasuresCreated Luffy: false");

		}
	}
	
	public  void getMyFollowerTreasuresCreatedZoro() throws RemoteException{
		GetMyFollowerTreasuresCreated getMyFollowerTreasuresCreated19 = new GetMyFollowerTreasuresCreated();
		Username param = new Username();
		param.setUsername("Zoro");
		getMyFollowerTreasuresCreated19.setArgs0(param );
		GetMyFollowerTreasuresCreatedResponse resGFTC 
			= stub.getMyFollowerTreasuresCreated(getMyFollowerTreasuresCreated19 );
		TreasureList res = resGFTC.get_return();
		if(res.getResult()){
			String textaco = "";
			textaco+="Resultado de getMyTreasuresCreated: true \n";
			textaco+="Nombres de los Tesoros = " + Arrays.toString(res.getNames()) + "\n";
			textaco+="Latitudes de los Tesoros = "+ Arrays.toString(res.getLats()) + "\n";
			textaco+="Altitudes de los Tesoros = "+ Arrays.toString(res.getAlts()) + "\n";
			TextoResultados.setText(textaco);
			}
		else{
			TextoResultados.setText("Resultado de getMyFollowerTreasuresCreated Zoro: false");

		}
	}
	
	public  void getMyFollowerTreasuresCreatedShanks() throws RemoteException{
		GetMyFollowerTreasuresCreated getMyFollowerTreasuresCreated19 = new GetMyFollowerTreasuresCreated();
		Username param = new Username();
		param.setUsername("Shanks");
		getMyFollowerTreasuresCreated19.setArgs0(param );
		GetMyFollowerTreasuresCreatedResponse resGFTC 
			= stub.getMyFollowerTreasuresCreated(getMyFollowerTreasuresCreated19 );
		TreasureList res = resGFTC.get_return();
		if(res.getResult()){
			String textaco = "";
			textaco+="Resultado de getMyTreasuresCreated: true \n";
			textaco+="Nombres de los Tesoros = " + Arrays.toString(res.getNames()) + "\n";
			textaco+="Latitudes de los Tesoros = "+ Arrays.toString(res.getLats()) + "\n";
			textaco+="Altitudes de los Tesoros = "+ Arrays.toString(res.getAlts()) + "\n";
			TextoResultados.setText(textaco);	
		}
		else{
			TextoResultados.setText("Resultado de getMyFollowerTreasuresCreated Shanks: false");
		}
	}

	
	  @SuppressWarnings("unchecked")
	  private void initComponents() {

	        jPanel1 = new javax.swing.JPanel();
	        globalTitle = new javax.swing.JLabel();
	        OpTitle = new javax.swing.JLabel();
	        userTitle = new javax.swing.JLabel();
	        ejecButton = new javax.swing.JButton();
	        operacionesBox = new javax.swing.JComboBox<>();
	        UsuariosBox = new javax.swing.JComboBox<>();
	        resultadosTitulo = new javax.swing.JLabel();
	        jScrollPane2 = new javax.swing.JScrollPane();
	        TextoResultados = new javax.swing.JTextPane();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	        globalTitle.setFont(BernardMTCondensesd); // NOI18N
	        globalTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        globalTitle.setText("UPMGEOCATCHING");

	        OpTitle.setFont(MongolianBaiti); // NOI18N
	        OpTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        OpTitle.setText("Operaciones");

	        userTitle.setFont(MongolianBaiti); // NOI18N
	        userTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        userTitle.setText("Usuarios / Tesoros");

	        ejecButton.setFont(MongolianBaiti); // NOI18N
	        ejecButton.setText("Ejecutar");
	        ejecButton.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                ejecButtonActionPerformed(evt);
	            }
	        });

	        operacionesBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 1-addUser", " 2-login", " 3-logout", " 4-removeUser", " 5-changePassword", " 6-addFollower", " 7-removeFollower", " 8-getMyFollowers", " 9-createTreasure", " 10-findTreasure", " 11-getMyTreasuresFound", " 12-getMyTreasuresCreated", " 13-getMyFollowerTreasuresCreated" }));
	        operacionesBox.setSelectedIndex(1);
	        operacionesBox.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                operacionesBoxActionPerformed(evt);
	            }
	        });

	        UsuariosBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 1-Monkey D Luffy / One Piece", " 2-Roronoa Zoro / Hito Hito no mi: Nika Model", " 3-Shanks / Tumba De Shirohige", " 4-Admin (solo valido para logIn)" }));
	        UsuariosBox.setPreferredSize(new java.awt.Dimension(250, 20));
	        UsuariosBox.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                UsuariosBoxActionPerformed(evt);
	            }
	        });

	        resultadosTitulo.setFont(MongolianBaiti); // NOI18N
	        resultadosTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        resultadosTitulo.setText("Resultados:");

	        jScrollPane2.setViewportView(TextoResultados);

	        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	        jPanel1.setLayout(jPanel1Layout);
	        jPanel1Layout.setHorizontalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(globalTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addComponent(ejecButton, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
	                    .addComponent(resultadosTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addGap(365, 365, 365))
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                .addGap(50, 50, 50)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addComponent(operacionesBox, 0, 350, Short.MAX_VALUE)
	                    .addComponent(OpTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addComponent(UsuariosBox, 0, 350, Short.MAX_VALUE)
	                    .addComponent(userTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addGap(50, 50, 50))
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGap(190, 190, 190)
	                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(190, Short.MAX_VALUE))
	        );
	        jPanel1Layout.setVerticalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGap(39, 39, 39)
	                .addComponent(globalTitle)
	                .addGap(18, 18, 18)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(OpTitle)
	                    .addComponent(userTitle))
	                .addGap(18, 18, 18)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(operacionesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(UsuariosBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
	                .addComponent(ejecButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(20, 20, 20)
	                .addComponent(resultadosTitulo)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap())
	        );

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGap(0, 12, Short.MAX_VALUE)
	                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(0, 12, Short.MAX_VALUE))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGap(0, 0, Short.MAX_VALUE)
	                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(0, 0, Short.MAX_VALUE))
	        );

	        pack();
	    }// </editor-fold>                                           

	 

    private void ejecButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here
        //SSystem.out.println("OP = " + operacionesBox.getSelectedIndex());
        //System.out.println("User = " + UsuariosBox.getSelectedIndex());
        numero = operacionesBox.getSelectedIndex() + 1;
        numero2 = UsuariosBox.getSelectedIndex() + 1 ;
        try{
        if(numero == 1 && numero2 == 1)
			addUserLuffy();
		else if(numero == 1 && numero2 == 2)
			addUserZoro();
		else if(numero == 1 && numero2 == 3)
			addUserShanks();
		
		else if(numero == 2 && numero2 == 1)
			loginLuffy();
		else if(numero == 2 && numero2 == 2)
			loginZoro();
		else if(numero == 2 && numero2 == 3)
			loginShanks();
		else if(numero == 2 && numero2 == 4)
			loginAdmin();
		
		else if(numero == 3)
			logout();
		
		else if(numero == 4 && numero2 == 1)
			removeUserLuffy();
		else if(numero == 4 && numero2 == 2)
			removeUserZoro();
		else if(numero == 4 && numero2 == 3)
			removeUserShanks();
		
		else if(numero == 5 && numero2 == 1)
			changePasswordLuffy();
		else if(numero == 5 && numero2 == 2)
			changePasswordZoro();
		else if(numero == 5 && numero2 == 3)
			changePasswordShanks();
		
		else if(numero == 6 && numero2 == 1)
			addFollowerLuffy();
		else if(numero == 6 && numero2 == 2)
			addFollowerZoro();
		else if(numero == 6 && numero2 == 3)
			addFollowerShanks();
		
		else if(numero == 7 && numero2 == 1)
			removeFollowerLuffy();
		else if(numero == 7 && numero2 == 2)
			removeFollowerZoro();
		else if(numero == 7 && numero2 == 3)
			removeFollowerShanks();
		
		else if(numero == 8)
			getMyFollowers();
		
		else if(numero == 9 && numero2 == 1)
			createTreasureOnePiece();
		else if(numero == 9 && numero2 == 2)
			createTreasureHitoHitoNikaModel();
		else if(numero == 9 && numero2 == 3)
			createTreasureTumbaDeShirohige();
		
		else if(numero == 10 && numero2 == 1)
			findTreasureOnePiece();
		else if(numero == 10 && numero2 == 2)
			findTreasureHitoHitoNikaModel();
		else if(numero == 10 && numero2 == 3)
			findTreasureTumbaDeShirohige();
		
		else if(numero == 11)
			getMyTreasuresFound();
		
		else if(numero == 12)
			getMyTreasuresCreated();
		
		else if(numero == 13 && numero2 == 1)
			getMyFollowerTreasuresCreatedLuffy();
		else if(numero == 13 && numero2 == 2)
			getMyFollowerTreasuresCreatedZoro();
		else if(numero == 13 && numero2 == 3)
			getMyFollowerTreasuresCreatedShanks();
		else
			JOptionPane.showMessageDialog(null, "Error con la operación seleccionada");
        }
        catch( RemoteException e){
			JOptionPane.showMessageDialog(null, "Excepcion AxisFault");
			System.exit(0);
        }
    }                                          

    private void operacionesBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void UsuariosBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel OpTitle;
    private javax.swing.JTextPane TextoResultados;
    private javax.swing.JComboBox<String> UsuariosBox;
    private javax.swing.JButton ejecButton;
    private javax.swing.JLabel globalTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> operacionesBox;
    private javax.swing.JLabel resultadosTitulo;
    private javax.swing.JLabel userTitle;
    // End of variables declaration                   
}